"""empty message

Revision ID: d918c317cb36
Revises: 0e69dd70f89a
Create Date: 2020-03-07 10:45:55.183814

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm.session import Session

# revision identifiers, used by Alembic.
revision = 'd918c317cb36'
down_revision = '588c2762fed0'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # postgres ENUM TYPES
    session = Session(bind=op.get_bind()) 
    if 'postgresql' in session.bind.dialect.name:
        contract_status = postgresql.ENUM('PLANNED', 'REQ4APPROVAL', 'APPROVED', 'SIGNED', 'ACTIVE', 'DECLINED', 'VOID', 'REPLACED', name='contractstatus')
        contract_status.create(op.get_bind())
        contract_action = postgresql.ENUM('NEW_CONTRACT', 'ADD_DEBTS', 'REMOVE_DEBTS', 'MODIFY_DEBTS', 'TERM_CHANGE', 'RECIEVE_SUMMON', 'ADD_COCLIENT', name='contractaction')
        contract_action.create(op.get_bind())
        session_status = postgresql.ENUM('SENT', 'CREATED', 'DELIVERED', 'COMPLETED', 'DECLINED', 'SIGNED', 'VOIDED', name='docusignsessionstatus')
        session_status.create(op.get_bind())

    op.create_table('debt_payment_contract_credit_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('contract_id', sa.Integer(), nullable=True),
    sa.Column('debt_id', sa.Integer(), nullable=True),
    sa.Column('creditor', sa.String(length=100), nullable=False),
    sa.Column('account_number', sa.String(length=25), nullable=False),
    sa.Column('balance_original', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['contract_id'], ['debt_payment_contract.id'], name='contract_credit_data_contract_id_fkey'),
    sa.ForeignKeyConstraint(['debt_id'], ['credit_report_data.id'], name='contract_credit_data_debt_id_fkey'),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('docusign_signature')
    op.drop_column('credit_report_accounts', 'payment_start_date')
    op.drop_column('credit_report_accounts', 'term')
    op.drop_column('credit_report_accounts', 'payment_recurring_begin_date')
    op.add_column('debt_payment_contract', sa.Column('current_action', sa.Enum('NEW_CONTRACT', 'ADD_DEBTS', 'REMOVE_DEBTS', 'MODIFY_DEBTS', 'TERM_CHANGE', 'RECIEVE_SUMMON', 'ADD_COCLIENT', name='contractaction'), nullable=True))
    op.add_column('debt_payment_contract', sa.Column('enrolled_debt', sa.Float(), nullable=True))
    op.add_column('debt_payment_contract', sa.Column('monthly_fee', sa.Float(), nullable=True))
    op.add_column('debt_payment_contract', sa.Column('num_inst_completed', sa.Integer(), nullable=True))
    op.add_column('debt_payment_contract', sa.Column('status', sa.Enum('PLANNED', 'APPROVED', 'ACTIVE', 'DECLINED', 'VOID', 'REPLACED', name='contractstatus'), nullable=True))
    op.add_column('debt_payment_contract', sa.Column('total_debt', sa.Float(), nullable=True))
    op.add_column('debt_payment_contract', sa.Column('total_paid', sa.Float(), nullable=True))
    op.add_column('debt_payment_schedule', sa.Column('contract_id', sa.Integer(), nullable=True))
    op.drop_constraint('fk_client', 'debt_payment_schedule', type_='foreignkey')
    op.create_foreign_key('debt_payment_schedule_contract_id_fkey', 'debt_payment_schedule', 'debt_payment_contract', ['contract_id'], ['id'])
    op.drop_column('debt_payment_schedule', 'client_id')
    op.add_column('docusign_session', sa.Column('contract_id', sa.Integer(), nullable=True))
    op.add_column('docusign_session', sa.Column('envelope_id', sa.String(length=200), nullable=True))
    op.add_column('docusign_session', sa.Column('modified_date', sa.DateTime(), nullable=True))
    op.add_column('docusign_session', sa.Column('status', sa.Enum('SENT', 'CREATED', 'DELIVERED', 'COMPLETED', 'DECLINED', 'SIGNED', 'VOIDED', name='docusignsessionstatus'), nullable=True))
    op.create_unique_constraint('docusign_session_envelope_id', 'docusign_session', ['envelope_id'])
    op.drop_constraint('docusign_session_client_id_fkey', 'docusign_session', type_='foreignkey')
    op.drop_constraint('docusign_session_co_client_id_fkey', 'docusign_session', type_='foreignkey')
    op.create_foreign_key('docusign_session_contract_id_fkey', 'docusign_session', 'debt_payment_contract', ['contract_id'], ['id'])
    op.drop_column('docusign_session', 'co_client_id')
    op.drop_column('docusign_session', 'session_type')
    op.drop_column('docusign_session', 'client_id')
    op.drop_column('docusign_session', 'cosign_required')
    op.drop_column('docusign_session', 'state')
    if 'postgresql' in session.bind.dialect.name:
        sig_status = postgresql.ENUM('SENT', 'CREATED', 'DELIVERED', 'COMPLETED', 'DECLINED', 'SIGNED', 'VOIDED', name='signaturestatus')
        sig_status.drop(op.get_bind())
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('docusign_session', sa.Column('state', postgresql.ENUM('PROGRESS', 'COMPLETED', 'FAILED', name='sessionstate'), autoincrement=False, nullable=True))
    op.add_column('docusign_session', sa.Column('cosign_required', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('docusign_session', sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('docusign_session', sa.Column('session_type', postgresql.ENUM('NewContract', 'ModifyDebts', name='sessiontype'), autoincrement=False, nullable=True))
    op.add_column('docusign_session', sa.Column('co_client_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint('docusign_session_contract_id_fkey', 'docusign_session', type_='foreignkey')
    op.create_foreign_key('docusign_session_co_client_id_fkey', 'docusign_session', 'clients', ['co_client_id'], ['id'])
    op.create_foreign_key('docusign_session_client_id_fkey', 'docusign_session', 'clients', ['client_id'], ['id'])
    op.drop_constraint('docusign_session_envelope_id', 'docusign_session', type_='unique')
    op.drop_column('docusign_session', 'status')
    op.drop_column('docusign_session', 'modified_date')
    op.drop_column('docusign_session', 'envelope_id')
    op.drop_column('docusign_session', 'contract_id')
    op.add_column('debt_payment_schedule', sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint('debt_payment_schedule_contract_id_fkey', 'debt_payment_schedule', type_='foreignkey')
    op.create_foreign_key('fk_client', 'debt_payment_schedule', 'clients', ['client_id'], ['id'])
    op.drop_column('debt_payment_schedule', 'contract_id')
    op.drop_column('debt_payment_contract', 'total_paid')
    op.drop_column('debt_payment_contract', 'total_debt')
    op.drop_column('debt_payment_contract', 'status')
    op.drop_column('debt_payment_contract', 'num_inst_completed')
    op.drop_column('debt_payment_contract', 'monthly_fee')
    op.drop_column('debt_payment_contract', 'enrolled_debt')
    op.drop_column('debt_payment_contract', 'current_action')
    op.add_column('credit_report_accounts', sa.Column('payment_recurring_begin_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('credit_report_accounts', sa.Column('term', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('credit_report_accounts', sa.Column('payment_start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.create_table('docusign_signature',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('envelope_id', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('SENT', 'CREATED', 'DELIVERED', 'COMPLETED', 'DECLINED', 'SIGNED', 'VOIDED', name='signaturestatus'), autoincrement=False, nullable=False),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['docusign_session.id'], name='docusign_signature_session_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='docusign_signature_pkey'),
    sa.UniqueConstraint('envelope_id', name='docusign_signature_envelope_id_key')
    )
    op.drop_table('debt_payment_contract_credit_data')
    session = Session(bind=op.get_bind())
    if 'postgresql' in session.bind.dialect.name:
        contract_status = postgresql.ENUM('PLANNED', 'REQ4APPROVAL', 'APPROVED', 'SIGNED', 'ACTIVE', 'DECLINED', 'VOID', 'REPLACED', name='contractstatus')
        contract_status.drop(op.get_bind())
        contract_action = postgresql.ENUM('NEW_CONTRACT', 'ADD_DEBTS', 'REMOVE_DEBTS', 'MODIFY_DEBTS', 'TERM_CHANGE', 'RECIEVE_SUMMON', 'ADD_COCLIENT', name='contractaction')
        contract_action.drop(op.get_bind())
        session_status = postgresql.ENUM('SENT', 'CREATED', 'DELIVERED', 'COMPLETED', 'DECLINED', 'SIGNED', 'VOIDED', name='docusignsessionstatus')
        session_status.drop(op.get_bind())


    # ### end Alembic commands ###
