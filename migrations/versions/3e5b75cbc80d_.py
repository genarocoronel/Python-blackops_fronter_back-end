"""empty message

Revision ID: 3e5b75cbc80d
Revises: d918c317cb36
Create Date: 2020-03-25 19:00:05.910778

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm.session import Session


# revision identifiers, used by Alembic.
revision = '3e5b75cbc80d'
down_revision = 'd918c317cb36'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('team_request_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('modified_on', sa.DateTime(), nullable=True),
    sa.Column('assign_type', sa.Enum('AUTO', 'USER', name='taskassigntype'), nullable=True),
    sa.Column('creator_id', sa.Integer(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.Column('client_id', sa.Integer(), nullable=True),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='taskpriority'), nullable=True),
    sa.Column('status', sa.Enum('NOTSTARTED', 'INPROGRESS', 'ONHOLD', 'COMPLETED', 'MISSED', 'CANCELED', name='taskstatus'), nullable=True),
    sa.Column('title', sa.String(length=120), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('object_type', sa.String(length=120), nullable=True),
    sa.Column('object_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name='user_tasks_client_id_fkey'),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name='user_tasks_creator_id_fkey'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='user_tasks_owner_id_fkey'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team_requests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('public_id', sa.String(length=100), nullable=True),
    sa.Column('requested_on', sa.DateTime(), nullable=True),
    sa.Column('modified_on', sa.DateTime(), nullable=True),
    sa.Column('requester_id', sa.Integer(), nullable=True),
    sa.Column('account_manager_id', sa.Integer(), nullable=True),
    sa.Column('team_manager_id', sa.Integer(), nullable=True),
    sa.Column('request_type_id', sa.Integer(), nullable=True),
    sa.Column('contract_id', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('NEW', 'APPROVED', 'DECLINED', name='teamrequeststatus'), nullable=True),
    sa.ForeignKeyConstraint(['account_manager_id'], ['users.id'], name='team_requests_account_manager_id_fkey'),
    sa.ForeignKeyConstraint(['contract_id'], ['debt_payment_contract.id'], name='team_requests_contract_id_fkey'),
    sa.ForeignKeyConstraint(['request_type_id'], ['team_request_types.id'], name='team_requests_request_type_id_fkey'),
    sa.ForeignKeyConstraint(['requester_id'], ['users.id'], name='team_requests_requester_id_fkey'),
    sa.ForeignKeyConstraint(['team_manager_id'], ['users.id'], name='team_requests_team_manager_id_fkey'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('public_id')
    )
    op.create_table('user_task_notes',
    sa.Column('note_id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['note_id'], ['notes.id'], name='user_task_notes_note_id_fkey'),
    sa.ForeignKeyConstraint(['task_id'], ['user_tasks.id'], name='user_task_notes_task_id_fkey'),
    sa.PrimaryKeyConstraint('note_id')
    )
    op.create_table('team_request_notes',
    sa.Column('note_id', sa.Integer(), nullable=False),
    sa.Column('team_request_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['note_id'], ['notes.id'], name='team_request_notes_note_id_fkey'),
    sa.ForeignKeyConstraint(['team_request_id'], ['team_requests.id'], name='team_request_notes_team_request_id_fkey'),
    sa.PrimaryKeyConstraint('note_id')
    )
    op.add_column('debt_payment_contract', sa.Column('agent_id', sa.Integer(), nullable=True))
    op.create_foreign_key('debt_payment_contract_agent_id_fkey', 'debt_payment_contract', 'users', ['agent_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('debt_payment_contract_agent_id_fkey', 'debt_payment_contract', type_='foreignkey')
    op.drop_column('debt_payment_contract', 'agent_id')
    op.drop_table('team_request_notes')
    op.drop_table('user_task_notes')
    op.drop_table('team_requests')
    op.drop_table('user_tasks')
    op.drop_table('team_request_types')
    # special handling for postgresql ENUM types
    session = Session(bind=op.get_bind())
    if 'postgresql' in session.bind.dialect.name:
        teamrequeststatus = postgresql.ENUM('NEW', 'APPROVED', 'DECLINED', name='teamrequeststatus')
        teamrequeststatus.drop(op.get_bind())
        taskstatus = postgresql.ENUM('NOTSTARTED', 'INPROGRESS', 'ONHOLD', 'COMPLETED', 'MISSED', 'CANCELED', name='taskstatus')
        taskstatus.drop(op.get_bind())
        taskpriority = postgresql.ENUM('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='taskpriority')
        taskpriority.drop(op.get_bind())
        taskassigntype = postgresql.ENUM('AUTO', 'USER', name='taskassigntype')
        taskassigntype.drop(op.get_bind())
    # ### end Alembic commands ###
